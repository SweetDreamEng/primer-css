name: Label
on:
  pull_request:
    types: [opened, synchronize, edited]

jobs:
  label-release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        id: version-result
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          result-encoding: string
          script: |
            const diff_url = context.payload.pull_request.diff_url
            const result = await github.request(diff_url)
            const match = [...result.data.matchAll(/^\+'@primer\/css':\s(patch|minor|major)/m)][0]
            console.log(match)
            if (match) {
              return match[1]
            }

      - uses: actions/github-script@v3
        env:
          RELEASE: ${{ steps.version-result.outputs.result }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            if (!process.env.RELEASE) { return }
            const issue = await github.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            })
            const currentLabels = issue.data.labels.map( l => l.name)
            const newLabel = `${process.env.RELEASE} release`
            console.log(currentLabels, newLabel)
            if (false && !currentLabels.includes(newLabel) && newLabel != 'undefined release') {
              const otherReleaseLabels = currentLabels.filter( l => l.endsWith(' release'))
              if (otherReleaseLabels.length) {
                github.issues.removeLabel({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: [otherReleaseLabels]
                })
              }
              github.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: [newLabel]
              })
            }
