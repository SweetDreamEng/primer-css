#!/usr/bin/env node
const execa = require('execa')
const fetch = require('isomorphic-fetch')
const fse = require('fs-extra')
const registryUrl = require('registry-url')
const semver = require('semver')

const getPackages = require('./get-packages')
const getReleaseVersion = require('./get-release-version')
const revertPackages = require('./revert-packages')

const PRERELEASE = 'prerelease'
const DIST_TAG = 'rc'
const PRIMER_CSS = 'primer'
const RELEASE_VERSION = getReleaseVersion(
  PRIMER_CSS,
  process.env.TRAVIS_BRANCH
)

const dryRun = process.argv.slice(2).indexOf('--dry-run') > -1

const depFields = [
  'dependencies',
  'devDependencies',
  'optionalDependencies',
  'peerDependencies',
]

revertPackages()
  .then(() => getPackages())
  .then(dirs => dirs.map(dir => {
    const pkg = require(`../${dir}/package.json`)
    pkg.dir = dir
    return pkg
  }))
  .then(pkgs => {
    return getUpdated()
      .then(updated => pkgs.filter(pkg => updated.includes(pkg.name)))
      .then(updated => {
        if (updated.length === 0) {
          console.warn('No packages updated! Aborting.')
          return
        }
        console.warn('%d packages updated...', updated.length)
        const changed = new Set(updated)
        return Promise.all(updated.map(pkg => {
          return bump(pkg, PRERELEASE, DIST_TAG)
            .then(pkg => updateDependants(pkg, pkgs))
            .then(dependants => {
              dependants.forEach(dep => changed.add(dep))
            })
        }))
        .then(() => {
          const tasks = Array.from(changed).map(writePackage)
          return Promise.all(tasks)
        })
        .then(updated => {
          const tasks = updated.filter(pkg => !pkg['private']).map(publishPackage)
          return Promise.all(tasks)
        })
        .then(() => {
          console.warn('ðŸ““  Updated CHANGELOG...\n')
          return execa('npx', ['lerna-changelog'], {env: process.env})
            .then(result => {
              console.warn(result.stdout)
            })
            .catch(error => {
              console.error('lerna-changelog error:', error)
            })
        })
      })
  })
  .catch(error => {
    console.error('Error:', error)
    process.exitCode = 1
  })

function getUpdated() {
  return execa('npx', ['lernal', 'updated', '--json'], {
      reject: false
    })
    .then(res => {
      if (res.stdout == '') {
        console.warn('No packages need updating')
        return []
      } else {
        return JSON.parse(res.stdout)
      }
    })
    .then(updated => updated
      .filter(pkg => !pkg['private'])
      .map(pkg => pkg.name))
}

function writePackage(pkg) {
  const {dir} = pkg
  delete pkg.dir
  const json = JSON.stringify(pkg, null, '  ') + '\n'
  pkg.dir = dir
  return fse.writeFile(`${pkg.dir}/package.json`, json, 'utf8')
    .then(() => pkg)
}

function bump(pkg, by, preid) {
  if (pkg.name === PRIMER_CSS) {
    pkg.version = RELEASE_VERSION
  }

  const original = pkg.version
  let version = increment(pkg.version, by, preid)
  return getPackageInfo(pkg.name)
    .then(info => {
      while (version in info.versions) {
        version = increment(version, by, preid)
      }
      console.warn('%s %s -> %s', pkg.name, original, version)
      pkg.version = version
      return writePackage(pkg)
    })
}

function getPackageInfo(name) {
  const url = registryUrl() + name
  return fetch(url).then(res => res.json())
}

function increment(version, by, preid) {
  const {major, minor, patch} = semver(version)
  const prev = [major, minor, patch].join('.')
  const next = semver.inc(version, by, preid)
  // if this is a prerelease, 'revert' major.minor.patch
  // so that only the prerelease id is incremented
  return by === PRERELEASE
    ? next.replace(/^\d+\.\d+\.\d+/, prev)
    : next
}

function updateDependants(pkg, pkgs) {
  return pkgs.filter(other => {
    let changed = false
    depFields.forEach(field => {
      if (other[field] && (pkg.name in other[field])) {
        other[field][pkg.name] = pkg.version
        changed = true
      }
    })
    return changed
  })
}

function publishPackage(pkg) {
  const command = 'npm'
  const args = ['publish', '--tag', DIST_TAG]
  if (dryRun) {
    console.log('publish:', pkg.name, '@', pkg.version, 'in:', pkg.dir)
    return
  }
  return execa(command, args, {
    cwd: pkg.dir,
    stdio: 'inherit'
  })
}
